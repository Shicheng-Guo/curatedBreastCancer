
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #!/usr/bin/env Rscript
> 
> #require(utils)
> #print(R.Version())
> #####modified ArrayExpress example from Purvesh
> 
> rm(list=ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 171835  9.2     350000 18.7   350000 18.7
Vcells 272818  2.1    5495868 42.0  6660215 50.9
> 
> require("affy")
Loading required package: affy
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following object(s) are masked from ‘package:stats’:

    xtabs

The following object(s) are masked from ‘package:base’:

    anyDuplicated, cbind, colnames, duplicated, eval, Filter, Find,
    get, intersect, lapply, Map, mapply, mget, order, paste, pmax,
    pmax.int, pmin, pmin.int, Position, rbind, Reduce, rep.int,
    rownames, sapply, setdiff, table, tapply, union, unique

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> require("gcrma")
Loading required package: gcrma
Loading required package: BiocInstaller
BiocInstaller version 1.4.7, ?biocLite for help
> 
> #script for non AE, affy (.CEL) files:use Affy package
> 
> #file path to separate directory of downloaded .CEL files
> 
> filePath = 
+ ("~/expr_breastCancerDatasets/GSE19697/GSE19697_RAW")
> 
> #what array the study used
> array = "gpl_570"
> 
> fileNames = list.files(filePath, full.names=TRUE)
> fileNamesShort = list.files(filePath)
> 
> setwd("~/expr_breastCancerDatasets/GSE19697/GSE19697_RAW")
> data = ReadAffy(filenames = fileNamesShort)
> 
> dataNorm = gcrma(data)
Loading required package: AnnotationDbi

Adjusting for optical effect........................Done.
Computing affinities.Done.
Adjusting for non-specific binding........................Done.
Normalizing
Calculating Expression
> 
> expr = exprs(dataNorm)
> setwd("~/expr_breastCancerDatasets/GSE19697")
> 
> 
> data = read.delim("GSE19697_expression.txt", header = TRUE)
> #arrays = data[,2:(dim(data)[2])]
> probeSet = data[,1]
> 
> 
> print(summary(expr))
 GSM491610.CEL    GSM491611.CEL    GSM491612.CEL    GSM491613.CEL   
 Min.   : 2.287   Min.   : 2.287   Min.   : 2.287   Min.   : 2.287  
 1st Qu.: 2.288   1st Qu.: 2.287   1st Qu.: 2.287   1st Qu.: 2.287  
 Median : 3.112   Median : 3.086   Median : 3.038   Median : 3.134  
 Mean   : 4.388   Mean   : 4.373   Mean   : 4.368   Mean   : 4.420  
 3rd Qu.: 6.135   3rd Qu.: 6.104   3rd Qu.: 6.067   3rd Qu.: 6.234  
 Max.   :15.257   Max.   :15.255   Max.   :15.441   Max.   :15.345  
 GSM491614.CEL    GSM491615.CEL    GSM491616.CEL    GSM491617.CEL   
 Min.   : 2.287   Min.   : 2.287   Min.   : 2.287   Min.   : 2.287  
 1st Qu.: 2.287   1st Qu.: 2.288   1st Qu.: 2.288   1st Qu.: 2.287  
 Median : 3.086   Median : 3.120   Median : 3.115   Median : 3.156  
 Mean   : 4.383   Mean   : 4.361   Mean   : 4.365   Mean   : 4.239  
 3rd Qu.: 6.147   3rd Qu.: 6.040   3rd Qu.: 5.993   3rd Qu.: 5.625  
 Max.   :15.213   Max.   :15.288   Max.   :15.427   Max.   :15.503  
 GSM491618.CEL    GSM491619.CEL    GSM491620.CEL    GSM491621.CEL   
 Min.   : 2.287   Min.   : 2.287   Min.   : 2.287   Min.   : 2.287  
 1st Qu.: 2.301   1st Qu.: 2.298   1st Qu.: 2.290   1st Qu.: 2.303  
 Median : 3.129   Median : 3.197   Median : 3.100   Median : 3.153  
 Mean   : 4.312   Mean   : 4.329   Mean   : 4.364   Mean   : 4.318  
 3rd Qu.: 5.859   3rd Qu.: 5.895   3rd Qu.: 6.066   3rd Qu.: 5.864  
 Max.   :15.463   Max.   :15.398   Max.   :15.634   Max.   :15.397  
 GSM491622.CEL    GSM491623.CEL    GSM491624.CEL    GSM491625.CEL   
 Min.   : 2.287   Min.   : 2.287   Min.   : 2.287   Min.   : 2.287  
 1st Qu.: 2.290   1st Qu.: 2.292   1st Qu.: 2.292   1st Qu.: 2.289  
 Median : 3.114   Median : 3.120   Median : 3.153   Median : 3.118  
 Mean   : 4.353   Mean   : 4.341   Mean   : 4.350   Mean   : 4.381  
 3rd Qu.: 6.020   3rd Qu.: 5.962   3rd Qu.: 6.020   3rd Qu.: 6.108  
 Max.   :15.521   Max.   :15.528   Max.   :15.363   Max.   :15.413  
 GSM491626.CEL    GSM491627.CEL    GSM491628.CEL    GSM491629.CEL   
 Min.   : 2.287   Min.   : 2.287   Min.   : 2.287   Min.   : 2.287  
 1st Qu.: 2.288   1st Qu.: 2.287   1st Qu.: 2.287   1st Qu.: 2.287  
 Median : 3.129   Median : 3.148   Median : 3.180   Median : 3.162  
 Mean   : 4.376   Mean   : 4.384   Mean   : 4.418   Mean   : 4.409  
 3rd Qu.: 6.122   3rd Qu.: 6.151   3rd Qu.: 6.219   3rd Qu.: 6.201  
 Max.   :15.403   Max.   :15.305   Max.   :15.454   Max.   :15.409  
 GSM491630.CEL    GSM491631.CEL    GSM491632.CEL    GSM491633.CEL   
 Min.   : 2.287   Min.   : 2.287   Min.   : 2.287   Min.   : 2.287  
 1st Qu.: 2.287   1st Qu.: 2.287   1st Qu.: 2.287   1st Qu.: 2.287  
 Median : 3.155   Median : 3.177   Median : 3.184   Median : 3.200  
 Mean   : 4.420   Mean   : 4.412   Mean   : 4.438   Mean   : 4.442  
 3rd Qu.: 6.253   3rd Qu.: 6.202   3rd Qu.: 6.265   3rd Qu.: 6.262  
 Max.   :15.440   Max.   :15.317   Max.   :15.294   Max.   :15.426  
> print(dim(expr))
[1] 54675    24
> 
> 
> 
> require("limma")
Loading required package: limma
> GSMID = substring(fileNamesShort, 4)
> GSMID = strsplit2(as.character(GSMID), ".CEL")
> print(attributes(GSMID))
$dim
[1] 24  1

> print(names(GSMID))
NULL
> GSMID = GSMID[,1]
> print(GSMID[1:10])
 [1] "491610" "491611" "491612" "491613" "491614" "491615" "491616" "491617"
 [9] "491618" "491619"
> 
> 
> 
> #load Purvesh's database functions db_functions.r
> source(file = "~/global_R_code/db_functions.r")
> con = connect.db("ywrfc09", "aveelyau05", host="buttelab-db1", dbname="annot_gpl")
Loading required package: DBI
Loading required package: RMySQL
> 
> #extract genes from your probe list
> dataMapping = mapProbesToGenes.db(con, probeSet, map.to="Symbol", gpl.table=array)
> dbDisconnect(con)
[1] TRUE
> 
> summary(dataMapping)
      gene      
 IGL@   :   21  
 IGHG1  :   18  
 HFE    :   15  
 NBPF10 :   14  
 TRA@   :   14  
 (Other):40953  
 NA's   :13640  
> print((dataMapping[probeSet,"gene"])[1:30])
   1007_s_at      1053_at       117_at       121_at    1255_g_at      1294_at 
      "DDR1"       "RFC2"      "HSPA6"       "PAX8"     "GUCA1A"       "UBA7" 
     1316_at      1320_at    1405_i_at      1431_at      1438_at      1487_at 
      "THRA"     "PTPN21"       "CCL5"     "CYP2E1"      "EPHB3"      "ESRRA" 
   1494_f_at 1552256_a_at 1552257_a_at   1552258_at   1552261_at   1552263_at 
    "CYP2A6"     "SCARB1"     "TTLL12" "NCRNA00152"      "WFDC2"      "MAPK1" 
1552264_a_at   1552266_at   1552269_at   1552271_at 1552272_a_at   1552274_at 
     "MAPK1"     "ADAM32"    "SPATA17"      "PRR22"      "PRR22"        "PXK" 
1552275_s_at 1552276_a_at 1552277_a_at 1552278_a_at 1552279_a_at   1552280_at 
       "PXK"      "VPS18"     "TMEFF1"    "SLC46A1"    "SLC46A1"      "TIMD4" 
> 
> #get Gene Symbol from your database
> 
> #setwd("~/GeneSymbol")
> 
> #I created a special Gene Symbol list for this datasets - the expr matrix 
> #included all of the NA values. bummer!
> 
> #load("GPL6480_GSE21794special_GeneSymbol.RData")
> #pull out the Gene Symbol list you previously created
> 
> #why I can't also use "genes" from limma: sometimes lists multiple genes
> #on one line so you should clean up the genes text beforehand
> 
> #names(annot)
> 
> #double-check: are all of the probes actually used in this specific study?
> 
> #make sure na.rm below removes NA from BOTH columns...
> #reporterID = annot$ProbeName
> #geneSymbol = annot$GeneSymbol
> 
> #if(all(rownames(expr) == annot$ID, na.rm = TRUE)){
> # reporterID = annot$ID
>  #geneSymbol = annot$GeneSymbol
>  #print("your targetIDs and the study targetIDs match up")
> 
> #}else{
> 
>  #probeCount =1
>  #reporterID = array(data = NA, dim = dim(expr)[1])
>  #geneSymbol = array(data = NA, dim = dim(expr)[1])
> 
>   #for(j in 1:length(annot$ID)){
> 
>    #if((annot$ID)[j] == rownames(expr)[probeCount]){
> 
>    #reporterID[probeCount] = annot$ID[j]
>    #geneSymbol[probeCount] = annot$GeneSymbol[j]
>    #probeCount = probeCount +1
> 
>    #}
>  #}
> 
> #}
> 
> #now double-check again
> 
> #print(all(rownames(expr) == reporterID))
> #if you get NA, that's fine - just means some rows are NA,
> #but you still didn't get any false values.
> #However make sure it's not ALL NAs!
> 
> boxplot(expr, las = 3, main = "GSE19697_GPL570") 
> 
> setwd("~/expr_breastCancerDatasets/GSE19697")
> Pheno = read.delim(header = TRUE, file = "GSE19697_clinical.txt")
> 
> GSE19697_GPL570= list(expr=expr, GSMID= GSMID, geneSymbol = 
+ dataMapping[probeSet,"gene"], reporterID = probeSet, Pheno = Pheno)
> 
> save(GSE19697_GPL570, file = "GSE19697_GPL570.RData")
> 
> #check dim
> print(length(GSE19697_GPL570$geneSymbol))
[1] 54675
> print(length(GSE19697_GPL570$reporterID))
[1] 54675
> print(length(GSMID))
[1] 24
> 
> #row length of expr should equal row length of gene symbol!!
> print(dim(GSE19697_GPL570$expr))                                 
[1] 54675    24
> 
> 
> proc.time()
   user  system elapsed 
253.574  11.378 266.353 
